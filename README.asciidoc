
= SnowCamp.io badges generation

This program is used to generate the https://snowcamp.io/[Snowcamp.io] badges.

== Update the date of the badge

=== Generate the date

. go to https://www.dafont.com/snowtop-caps.font?text=2019&psize=l
. change the new date (eg 2019)
. take a screenshot and crop to the selection
. export as png
. open with an image editor
.. set white to transparency
.. map black to white
.. export as png (eg 2019.png)

=== Update the badge model

Use the file `src/main/resources/template-badge.svg.mustache`

. copy it into `template-badge.svg`
. open it with a vector editor (eg Inkscape)
. open the png file with the date (eg 2019.png) with the same editor
. select the date of the badge template and remove it
. copy / paste the new date and adjust the format
. ensure the size of the svg is around A6 format (105x148mm)
. save the file

IMPORTANT: the bagde size must be around 105x148mm so that after the
printing and the cutting, the badges have a size of around 100x140 mm

=== Backport the svg to the model

`template-badge.svg.mustache` declares some mustache variables that will be
injected by the https://mustache.github.io/[Mustache templating engine] but
Inkscape remove some of them. To avoid this, you need to merge the svg file
you've generated with the mustache template.

To do so, you can use Intellij (compare the two files) or whatever diff
editor.

1. backport the changes from `template-badge.svg` to `template-badge.svg.mustache`
(use the `Compare files` feature of IntelliJ for instance. Don't copy absolute path references).
2. save the file


=== Change the color of the bottom band


Every year, we change the color of the bottom band for:

* attendees
* speakers
* sponsors

1. edit the config file `application.yaml`
2. choose different html colors for them (don't touch the staff color)

NOTE: we keep the same color for the staff.

== Generate the badge

. edit the config file `application.yaml` and change the value
of `inputFile` to point to the csv files exported from Yurplan
.. export `Participants` list from Yurplan:
... in Yurplan, go to `Participants`
... for `Filtre`, choose `Statut` -> `Valide`
... click on the button `Filtrer ma recherche`
... click on the button `Export et Téléchargement > Exporter tous les billets`
... in `application.yaml`, declare as `inputFile` this exported file (absolute path
or add the file in this project directory. *Beware to exclude it from git commits!*)
.. export `Universities` list from Yurplan:
... in Yurplan, go to `Activités > Gestion des activités`
... click on `Filtres et recherche > Afficher plus de filtres`
... choose `Statut` -> `Valide`
... click on the button `Rechercher`
... click on the button `Export et Téléchargement > Exporter le listing complet`
... in `application.yaml`, declare as `univsFile` this exported file (absolute path
or add the file in this project directory. *Beware to exclude it from git commits!*)
. run the main of the `App` class

NOTE: values that enables to distinguish between sponsors, speakers, staff
and attendees must start with respectively: `Sponsor stand`, `Speaker` and
`Staff`

NOTE: the column order of Yurplan CSV files may change from one year to another.
You may need to update the code (`AttendeeCsvParser` and `UnivCsvParser`)
to update the column number to parse.

NOTE: check that you got the correct number of badges.